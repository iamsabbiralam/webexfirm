// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobType

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobTypesServiceClient is the client API for JobTypesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobTypesServiceClient interface {
	CreateJobTypes(ctx context.Context, in *CreateJobTypesRequest, opts ...grpc.CallOption) (*CreateJobTypesResponse, error)
	UpdateJobTypes(ctx context.Context, in *UpdateJobTypesRequest, opts ...grpc.CallOption) (*UpdateJobTypesResponse, error)
	GetJobTypes(ctx context.Context, in *GetJobTypesRequest, opts ...grpc.CallOption) (*GetJobTypesResponse, error)
	ListJobTypes(ctx context.Context, in *ListJobTypesRequest, opts ...grpc.CallOption) (*ListJobTypesResponse, error)
	DeleteJobTypes(ctx context.Context, in *DeleteJobTypesRequest, opts ...grpc.CallOption) (*DeleteJobTypesResponse, error)
	GetJobTypesByTitle(ctx context.Context, in *GetJobTypesByTitleRequest, opts ...grpc.CallOption) (*GetJobTypesByTitleResponse, error)
}

type jobTypesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobTypesServiceClient(cc grpc.ClientConnInterface) JobTypesServiceClient {
	return &jobTypesServiceClient{cc}
}

func (c *jobTypesServiceClient) CreateJobTypes(ctx context.Context, in *CreateJobTypesRequest, opts ...grpc.CallOption) (*CreateJobTypesResponse, error) {
	out := new(CreateJobTypesResponse)
	err := c.cc.Invoke(ctx, "/jobType.JobTypesService/CreateJobTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTypesServiceClient) UpdateJobTypes(ctx context.Context, in *UpdateJobTypesRequest, opts ...grpc.CallOption) (*UpdateJobTypesResponse, error) {
	out := new(UpdateJobTypesResponse)
	err := c.cc.Invoke(ctx, "/jobType.JobTypesService/UpdateJobTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTypesServiceClient) GetJobTypes(ctx context.Context, in *GetJobTypesRequest, opts ...grpc.CallOption) (*GetJobTypesResponse, error) {
	out := new(GetJobTypesResponse)
	err := c.cc.Invoke(ctx, "/jobType.JobTypesService/GetJobTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTypesServiceClient) ListJobTypes(ctx context.Context, in *ListJobTypesRequest, opts ...grpc.CallOption) (*ListJobTypesResponse, error) {
	out := new(ListJobTypesResponse)
	err := c.cc.Invoke(ctx, "/jobType.JobTypesService/ListJobTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTypesServiceClient) DeleteJobTypes(ctx context.Context, in *DeleteJobTypesRequest, opts ...grpc.CallOption) (*DeleteJobTypesResponse, error) {
	out := new(DeleteJobTypesResponse)
	err := c.cc.Invoke(ctx, "/jobType.JobTypesService/DeleteJobTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTypesServiceClient) GetJobTypesByTitle(ctx context.Context, in *GetJobTypesByTitleRequest, opts ...grpc.CallOption) (*GetJobTypesByTitleResponse, error) {
	out := new(GetJobTypesByTitleResponse)
	err := c.cc.Invoke(ctx, "/jobType.JobTypesService/GetJobTypesByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobTypesServiceServer is the server API for JobTypesService service.
// All implementations must embed UnimplementedJobTypesServiceServer
// for forward compatibility
type JobTypesServiceServer interface {
	CreateJobTypes(context.Context, *CreateJobTypesRequest) (*CreateJobTypesResponse, error)
	UpdateJobTypes(context.Context, *UpdateJobTypesRequest) (*UpdateJobTypesResponse, error)
	GetJobTypes(context.Context, *GetJobTypesRequest) (*GetJobTypesResponse, error)
	ListJobTypes(context.Context, *ListJobTypesRequest) (*ListJobTypesResponse, error)
	DeleteJobTypes(context.Context, *DeleteJobTypesRequest) (*DeleteJobTypesResponse, error)
	GetJobTypesByTitle(context.Context, *GetJobTypesByTitleRequest) (*GetJobTypesByTitleResponse, error)
	mustEmbedUnimplementedJobTypesServiceServer()
}

// UnimplementedJobTypesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobTypesServiceServer struct {
}

func (UnimplementedJobTypesServiceServer) CreateJobTypes(context.Context, *CreateJobTypesRequest) (*CreateJobTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobTypes not implemented")
}
func (UnimplementedJobTypesServiceServer) UpdateJobTypes(context.Context, *UpdateJobTypesRequest) (*UpdateJobTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobTypes not implemented")
}
func (UnimplementedJobTypesServiceServer) GetJobTypes(context.Context, *GetJobTypesRequest) (*GetJobTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobTypes not implemented")
}
func (UnimplementedJobTypesServiceServer) ListJobTypes(context.Context, *ListJobTypesRequest) (*ListJobTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobTypes not implemented")
}
func (UnimplementedJobTypesServiceServer) DeleteJobTypes(context.Context, *DeleteJobTypesRequest) (*DeleteJobTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobTypes not implemented")
}
func (UnimplementedJobTypesServiceServer) GetJobTypesByTitle(context.Context, *GetJobTypesByTitleRequest) (*GetJobTypesByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobTypesByTitle not implemented")
}
func (UnimplementedJobTypesServiceServer) mustEmbedUnimplementedJobTypesServiceServer() {}

// UnsafeJobTypesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobTypesServiceServer will
// result in compilation errors.
type UnsafeJobTypesServiceServer interface {
	mustEmbedUnimplementedJobTypesServiceServer()
}

func RegisterJobTypesServiceServer(s grpc.ServiceRegistrar, srv JobTypesServiceServer) {
	s.RegisterService(&JobTypesService_ServiceDesc, srv)
}

func _JobTypesService_CreateJobTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTypesServiceServer).CreateJobTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobType.JobTypesService/CreateJobTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTypesServiceServer).CreateJobTypes(ctx, req.(*CreateJobTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTypesService_UpdateJobTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTypesServiceServer).UpdateJobTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobType.JobTypesService/UpdateJobTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTypesServiceServer).UpdateJobTypes(ctx, req.(*UpdateJobTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTypesService_GetJobTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTypesServiceServer).GetJobTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobType.JobTypesService/GetJobTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTypesServiceServer).GetJobTypes(ctx, req.(*GetJobTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTypesService_ListJobTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTypesServiceServer).ListJobTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobType.JobTypesService/ListJobTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTypesServiceServer).ListJobTypes(ctx, req.(*ListJobTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTypesService_DeleteJobTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTypesServiceServer).DeleteJobTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobType.JobTypesService/DeleteJobTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTypesServiceServer).DeleteJobTypes(ctx, req.(*DeleteJobTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTypesService_GetJobTypesByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobTypesByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTypesServiceServer).GetJobTypesByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobType.JobTypesService/GetJobTypesByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTypesServiceServer).GetJobTypesByTitle(ctx, req.(*GetJobTypesByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobTypesService_ServiceDesc is the grpc.ServiceDesc for JobTypesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobTypesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobType.JobTypesService",
	HandlerType: (*JobTypesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobTypes",
			Handler:    _JobTypesService_CreateJobTypes_Handler,
		},
		{
			MethodName: "UpdateJobTypes",
			Handler:    _JobTypesService_UpdateJobTypes_Handler,
		},
		{
			MethodName: "GetJobTypes",
			Handler:    _JobTypesService_GetJobTypes_Handler,
		},
		{
			MethodName: "ListJobTypes",
			Handler:    _JobTypesService_ListJobTypes_Handler,
		},
		{
			MethodName: "DeleteJobTypes",
			Handler:    _JobTypesService_DeleteJobTypes_Handler,
		},
		{
			MethodName: "GetJobTypesByTitle",
			Handler:    _JobTypesService_GetJobTypesByTitle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "practice/webex/gunk/v1/jobType/all.proto",
}
