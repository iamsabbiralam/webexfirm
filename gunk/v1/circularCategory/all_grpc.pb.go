// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package circularCategory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CircularCategoryServiceClient is the client API for CircularCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircularCategoryServiceClient interface {
	CreateCircularCategory(ctx context.Context, in *CreateCircularCategoryRequest, opts ...grpc.CallOption) (*CreateCircularCategoryResponse, error)
	UpdateCircularCategory(ctx context.Context, in *UpdateCircularCategoryRequest, opts ...grpc.CallOption) (*UpdateCircularCategoryResponse, error)
	GetCircularCategory(ctx context.Context, in *GetCircularCategoryRequest, opts ...grpc.CallOption) (*GetCircularCategoryResponse, error)
	ListCircularCategory(ctx context.Context, in *ListCircularCategoryRequest, opts ...grpc.CallOption) (*ListCircularCategoryResponse, error)
	DeleteCircularCategory(ctx context.Context, in *DeleteCircularCategoryRequest, opts ...grpc.CallOption) (*DeleteCircularCategoryResponse, error)
}

type circularCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircularCategoryServiceClient(cc grpc.ClientConnInterface) CircularCategoryServiceClient {
	return &circularCategoryServiceClient{cc}
}

func (c *circularCategoryServiceClient) CreateCircularCategory(ctx context.Context, in *CreateCircularCategoryRequest, opts ...grpc.CallOption) (*CreateCircularCategoryResponse, error) {
	out := new(CreateCircularCategoryResponse)
	err := c.cc.Invoke(ctx, "/circularCategory.CircularCategoryService/CreateCircularCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circularCategoryServiceClient) UpdateCircularCategory(ctx context.Context, in *UpdateCircularCategoryRequest, opts ...grpc.CallOption) (*UpdateCircularCategoryResponse, error) {
	out := new(UpdateCircularCategoryResponse)
	err := c.cc.Invoke(ctx, "/circularCategory.CircularCategoryService/UpdateCircularCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circularCategoryServiceClient) GetCircularCategory(ctx context.Context, in *GetCircularCategoryRequest, opts ...grpc.CallOption) (*GetCircularCategoryResponse, error) {
	out := new(GetCircularCategoryResponse)
	err := c.cc.Invoke(ctx, "/circularCategory.CircularCategoryService/GetCircularCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circularCategoryServiceClient) ListCircularCategory(ctx context.Context, in *ListCircularCategoryRequest, opts ...grpc.CallOption) (*ListCircularCategoryResponse, error) {
	out := new(ListCircularCategoryResponse)
	err := c.cc.Invoke(ctx, "/circularCategory.CircularCategoryService/ListCircularCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circularCategoryServiceClient) DeleteCircularCategory(ctx context.Context, in *DeleteCircularCategoryRequest, opts ...grpc.CallOption) (*DeleteCircularCategoryResponse, error) {
	out := new(DeleteCircularCategoryResponse)
	err := c.cc.Invoke(ctx, "/circularCategory.CircularCategoryService/DeleteCircularCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircularCategoryServiceServer is the server API for CircularCategoryService service.
// All implementations must embed UnimplementedCircularCategoryServiceServer
// for forward compatibility
type CircularCategoryServiceServer interface {
	CreateCircularCategory(context.Context, *CreateCircularCategoryRequest) (*CreateCircularCategoryResponse, error)
	UpdateCircularCategory(context.Context, *UpdateCircularCategoryRequest) (*UpdateCircularCategoryResponse, error)
	GetCircularCategory(context.Context, *GetCircularCategoryRequest) (*GetCircularCategoryResponse, error)
	ListCircularCategory(context.Context, *ListCircularCategoryRequest) (*ListCircularCategoryResponse, error)
	DeleteCircularCategory(context.Context, *DeleteCircularCategoryRequest) (*DeleteCircularCategoryResponse, error)
	mustEmbedUnimplementedCircularCategoryServiceServer()
}

// UnimplementedCircularCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCircularCategoryServiceServer struct {
}

func (UnimplementedCircularCategoryServiceServer) CreateCircularCategory(context.Context, *CreateCircularCategoryRequest) (*CreateCircularCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCircularCategory not implemented")
}
func (UnimplementedCircularCategoryServiceServer) UpdateCircularCategory(context.Context, *UpdateCircularCategoryRequest) (*UpdateCircularCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCircularCategory not implemented")
}
func (UnimplementedCircularCategoryServiceServer) GetCircularCategory(context.Context, *GetCircularCategoryRequest) (*GetCircularCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircularCategory not implemented")
}
func (UnimplementedCircularCategoryServiceServer) ListCircularCategory(context.Context, *ListCircularCategoryRequest) (*ListCircularCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCircularCategory not implemented")
}
func (UnimplementedCircularCategoryServiceServer) DeleteCircularCategory(context.Context, *DeleteCircularCategoryRequest) (*DeleteCircularCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCircularCategory not implemented")
}
func (UnimplementedCircularCategoryServiceServer) mustEmbedUnimplementedCircularCategoryServiceServer() {
}

// UnsafeCircularCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircularCategoryServiceServer will
// result in compilation errors.
type UnsafeCircularCategoryServiceServer interface {
	mustEmbedUnimplementedCircularCategoryServiceServer()
}

func RegisterCircularCategoryServiceServer(s grpc.ServiceRegistrar, srv CircularCategoryServiceServer) {
	s.RegisterService(&CircularCategoryService_ServiceDesc, srv)
}

func _CircularCategoryService_CreateCircularCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCircularCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircularCategoryServiceServer).CreateCircularCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circularCategory.CircularCategoryService/CreateCircularCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircularCategoryServiceServer).CreateCircularCategory(ctx, req.(*CreateCircularCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircularCategoryService_UpdateCircularCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCircularCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircularCategoryServiceServer).UpdateCircularCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circularCategory.CircularCategoryService/UpdateCircularCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircularCategoryServiceServer).UpdateCircularCategory(ctx, req.(*UpdateCircularCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircularCategoryService_GetCircularCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircularCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircularCategoryServiceServer).GetCircularCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circularCategory.CircularCategoryService/GetCircularCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircularCategoryServiceServer).GetCircularCategory(ctx, req.(*GetCircularCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircularCategoryService_ListCircularCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCircularCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircularCategoryServiceServer).ListCircularCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circularCategory.CircularCategoryService/ListCircularCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircularCategoryServiceServer).ListCircularCategory(ctx, req.(*ListCircularCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircularCategoryService_DeleteCircularCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCircularCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircularCategoryServiceServer).DeleteCircularCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circularCategory.CircularCategoryService/DeleteCircularCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircularCategoryServiceServer).DeleteCircularCategory(ctx, req.(*DeleteCircularCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CircularCategoryService_ServiceDesc is the grpc.ServiceDesc for CircularCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CircularCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "circularCategory.CircularCategoryService",
	HandlerType: (*CircularCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCircularCategory",
			Handler:    _CircularCategoryService_CreateCircularCategory_Handler,
		},
		{
			MethodName: "UpdateCircularCategory",
			Handler:    _CircularCategoryService_UpdateCircularCategory_Handler,
		},
		{
			MethodName: "GetCircularCategory",
			Handler:    _CircularCategoryService_GetCircularCategory_Handler,
		},
		{
			MethodName: "ListCircularCategory",
			Handler:    _CircularCategoryService_ListCircularCategory_Handler,
		},
		{
			MethodName: "DeleteCircularCategory",
			Handler:    _CircularCategoryService_DeleteCircularCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "practice/webex/gunk/v1/circularCategory/all.proto",
}
